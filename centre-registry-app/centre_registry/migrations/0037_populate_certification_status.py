# Generated by Django 4.2.18 on 2025-03-05 10:00

import centre_registry.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import simple_history.models

from centre_registry.models import CertificationStatus
from centre_registry.models import Centre


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# centre_registry.migrations.0039_populate_consortium_country_field
# centre_registry.migrations.0042_populate_certification_status

def populate_certification_status(apps, schema):
    centres = Centre.objects.all()

    if not CertificationStatus.objects.filter(status='Certified').exists():
        CERTIFIED = CertificationStatus(status='Certified')
        CERTIFIED.save()
    else:
        CERTIFIED = CertificationStatus.objects.get(status='Certified')

    if not CertificationStatus.objects.filter(status='Pending').exists():
        PENDING = CertificationStatus(status='Pending')
        PENDING.save()
    else:
        PENDING = CertificationStatus.objects.get(status='Pending')

    if not CertificationStatus.objects.filter(status='Pending (recertification)').exists():
        PENDING_RECERTIFICATION = CertificationStatus(status='Pending (recertification)')
        PENDING_RECERTIFICATION.save()
    else:
        PENDING_RECERTIFICATION = CertificationStatus.objects.get(status='Pending (recertification)')

    if not CertificationStatus.objects.filter(status='Suspended').exists():
        SUSPENDED = CertificationStatus(status='Suspended')
        SUSPENDED.save()
    else:
        SUSPENDED = CertificationStatus.objects.get(status='Suspended')

    if not CertificationStatus.objects.filter(status='Archived').exists():
        ARCHIVED = CertificationStatus(status='Archived')
        ARCHIVED.save()
    else:
        ARCHIVED = CertificationStatus.objects.get(status='Archived')

    for centre in centres:
        status_comment = centre.type_status_comment
    if status_comment == 'Certified':
        centre.type_certification_status = CERTIFIED
    elif "expired" in status_comment:
        centre.type_certification_status = PENDING_RECERTIFICATION


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('centre_registry', '0036_remove_centre_institution_and_more_squashed_0042_populate_certification_status'),
    ]

    operations = [
        migrations.RunPython(populate_certification_status),
    ]
