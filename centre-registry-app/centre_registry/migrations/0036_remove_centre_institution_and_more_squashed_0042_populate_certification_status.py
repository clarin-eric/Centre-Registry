# Generated by Django 4.2.18 on 2025-03-05 10:00

import centre_registry.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import simple_history.models

from centre_registry.models import CertificationStatus
from centre_registry.models import Centre


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# centre_registry.migrations.0039_populate_consortium_country_field
# centre_registry.migrations.0042_populate_certification_status

def populate_certification_status(apps):
    centres = Centre.objects.all()

    if not CertificationStatus.objects.filter(status='Certified').exists():
        CERTIFIED = CertificationStatus(status='Certified')
        CERTIFIED.save()
    else:
        CERTIFIED = CertificationStatus.objects.get(status='Certified')

    if not CertificationStatus.objects.filter(status='Pending').exists():
        PENDING = CertificationStatus(status='Pending')
        PENDING.save()
    else:
        PENDING = CertificationStatus.objects.get(status='Pending')

    if not CertificationStatus.objects.filter(status='Pending (recertification)').exists():
        PENDING_RECERTIFICATION = CertificationStatus(status='Pending (recertification)')
        PENDING_RECERTIFICATION.save()
    else:
        PENDING_RECERTIFICATION = CertificationStatus.objects.get(status='Pending (recertification)')

    if not CertificationStatus.objects.filter(status='Suspended').exists():
        SUSPENDED = CertificationStatus(status='Suspended')
        SUSPENDED.save()
    else:
        SUSPENDED = CertificationStatus.objects.get(status='Suspended')

    if not CertificationStatus.objects.filter(status='Archived').exists():
        ARCHIVED = CertificationStatus(status='Archived')
        ARCHIVED.save()
    else:
        ARCHIVED = CertificationStatus.objects.get(status='Archived')

    for centre in centres:
        status_comment = centre.type_status_comment
    if status_comment == 'Certified':
        centre.type_certification_status = CERTIFIED
    elif "expired" in status_comment:
        centre.type_certification_status = PENDING_RECERTIFICATION


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('centre_registry', '0035_alter_centre_organisation_name_alter_centre_type'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='centre',
            name='institution',
        ),
        migrations.RemoveField(
            model_name='centre',
            name='organisation_name',
        ),
        migrations.RemoveField(
            model_name='centre',
            name='working_unit',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='address',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='city',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='latitude',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='longitude',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='postal_code',
        ),
        migrations.AlterField(
            model_name='assessmentdates',
            name='duedate',
            field=models.DateField(verbose_name='Assessment due date (DD-MM-YYYY)'),
        ),
        migrations.AlterField(
            model_name='assessmentdates',
            name='issuedate',
            field=models.DateField(verbose_name='Assessment issued date (DD-MM-YYYY)'),
        ),
        migrations.CreateModel(
            name='HistoricalURLReference',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('description', models.CharField(max_length=300, verbose_name='Content description')),
                ('url', models.URLField(db_index=True, max_length=2000, verbose_name='URL')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical URL reference',
                'verbose_name_plural': 'historical URL references',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSAMLServiceProvider',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('entity_id', models.CharField(db_index=True, max_length=1024, verbose_name='Entity ID')),
                ('status_url', models.URLField(blank=True, max_length=1024, verbose_name='Status URL')),
                ('production_status', models.BooleanField(default=True, verbose_name='Has production status?')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical SAML Service Provider',
                'verbose_name_plural': 'historical SAML Service Providers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSAMLIdentityFederation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('shorthand', models.CharField(db_index=True, max_length=30, verbose_name='Shorthand code')),
                ('information_url', models.URLField(max_length=1024, verbose_name='Information URL')),
                ('saml_metadata_url', models.URLField(max_length=1024, verbose_name='SAML metadata URL')),
                ('signing_key', models.TextField(blank=True, verbose_name='XML digital signature X.509v3 public key (PEM format, without "-----BEGIN CERTIFICATE-----" begin and and end marker)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical SAML identity federation',
                'verbose_name_plural': 'historical SAML identity federations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrganisation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('organisation_name', models.CharField(max_length=100, verbose_name='Organisation')),
                ('institution', models.CharField(blank=True, max_length=200, verbose_name='Institution')),
                ('working_unit', models.CharField(blank=True, max_length=200, verbose_name='Working unit')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical organisation',
                'verbose_name_plural': 'historical organisations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOAIPMHEndpointSet',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('set_spec', models.CharField(blank=True, max_length=1024, verbose_name='Set specification')),
                ('set_type', models.CharField(default='VLO', max_length=1024, verbose_name='Set type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical OAI-PMH Set',
                'verbose_name_plural': 'historical OAI-PMH Sets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOAIPMHEndpoint',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, max_length=2000, verbose_name='Base URI')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical OAI-PMH Endpoint',
                'verbose_name_plural': 'historical OAI-PMH Endpoints',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFCSEndpoint',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, max_length=2000, verbose_name='Base URI')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical FCS endpoint',
                'verbose_name_plural': 'historical FCS endpoints',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContact',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254, verbose_name='E-mail address')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('edupersonprincipalname', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='eduPersonPrincipalName')),
                ('telephone_number', models.CharField(blank=True, max_length=40, verbose_name='Telephone number (E.123 international notation)')),
                ('website_url', models.URLField(blank=True, max_length=2000, verbose_name='Website URL')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical contact',
                'verbose_name_plural': 'historical contacts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCentreType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(db_index=True, max_length=1, verbose_name='Certified centre type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical centre type',
                'verbose_name_plural': 'historical centre types',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAssessmentDates',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('issuedate', models.DateField(verbose_name='Assessment issued date (DD-MM-YYYY)')),
                ('duedate', models.DateField(verbose_name='Assessment due date (DD-MM-YYYY)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical issue/due dates for a centre administrative_contacttype',
                'verbose_name_plural': 'historical issue/due dates for a centre type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='centre',
            name='country',
            field=django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country'),
        ),
        migrations.CreateModel(
            name='HistoricalCentre',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Name')),
                ('shorthand', models.CharField(db_index=True, max_length=30, verbose_name='Shorthand code')),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal code')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('latitude', models.CharField(max_length=20, validators=[centre_registry.models.validate_latitude], verbose_name='Latitude (from e.g. Google Maps)')),
                ('longitude', models.CharField(max_length=20, validators=[centre_registry.models.validate_longitude], verbose_name='Longitude (from e.g. Google Maps)')),
                ('type_status', models.CharField(blank=True, max_length=100, verbose_name="Comments about centre's type")),
                ('website_url', models.URLField(max_length=2000, verbose_name='Website URL')),
                ('description', models.CharField(blank=True, max_length=500, verbose_name='Description')),
                ('expertise', models.CharField(blank=True, max_length=200, verbose_name='Expertise')),
                ('type_certificate_url', models.URLField(blank=True, max_length=2000, verbose_name='Centre type certificate URL')),
                ('dsa_url', models.URLField(blank=True, max_length=2000, verbose_name='Data Seal of Approval URL')),
                ('pid_status', models.CharField(blank=True, max_length=200, verbose_name='Persistent Identifier usage status')),
                ('long_term_archiving_policy', models.CharField(blank=True, max_length=200, verbose_name='Long Time Archiving Policy')),
                ('repository_system', models.CharField(blank=True, max_length=200, verbose_name='Repository system')),
                ('strict_versioning', models.BooleanField(default=False, verbose_name='Strict versioning?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('administrative_contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.contact')),
                ('consortium', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.consortium')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organisation_fk', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.organisation')),
                ('technical_contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.contact')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country')),
            ],
            options={
                'verbose_name': 'historical centre',
                'verbose_name_plural': 'historical centres',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='consortium',
            name='country',
            field=django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country'),
        ),
        migrations.CreateModel(
            name='HistoricalConsortium',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('country_code', models.CharField(db_index=True, max_length=3, verbose_name='Country code')),
                ('country_name', models.CharField(db_index=True, max_length=20, verbose_name='Country name')),
                ('is_observer', models.BooleanField(default=False, verbose_name='Is observer (not member)?')),
                ('name', models.CharField(blank=True, max_length=40, verbose_name='Name')),
                ('website_url', models.URLField(blank=True, max_length=2000, verbose_name='Website URL')),
                ('alias', models.CharField(blank=True, max_length=25, verbose_name='DNS subdomain alias * (*.clarin.eu)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country')),
            ],
            options={
                'verbose_name': 'historical consortium',
                'verbose_name_plural': 'historical consortia',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RenameField(
            model_name='centre',
            old_name='type_status',
            new_name='type_status_comment',
        ),
        migrations.RenameField(
            model_name='historicalcentre',
            old_name='type_status',
            new_name='type_status_comment',
        ),
        migrations.CreateModel(
            name='CertificationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=30, verbose_name='Certification status')),
            ],
        ),
        migrations.AddField(
            model_name='centre',
            name='requires_manual_certificate_validation',
            field=models.BooleanField(default=False, verbose_name='Centre requires certificate status validation'),
        ),
        migrations.AddField(
            model_name='historicalcentre',
            name='requires_manual_certificate_validation',
            field=models.BooleanField(default=False, verbose_name='Centre requires certificate status validation'),
        ),
        migrations.AddField(
            model_name='centre',
            name='type_certification_status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='centre_registry.certificationstatus'),
        ),
        migrations.AddField(
            model_name='historicalcentre',
            name='type_certification_status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='centre_registry.certificationstatus'),
        ),
        migrations.CreateModel(
            name='HistoricalCertificationStatus',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(max_length=30, verbose_name='Certification status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical certification status',
                'verbose_name_plural': 'historical certification statuss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RunPython(populate_certification_status),

    ]
