# Generated by Django 2.2.8 on 2020-02-20 11:42

from django.db import migrations


def oaipmh_endpoint_manytomany_oaipmh_set(apps, schema_editor):
    OAIPMHEndpoint = apps.get_model("centre_registry", "OAIPMHEndpoint")
    OAIPMHEndpointSet = apps.get_model("centre_registry", "OAIPMHEndpointSet")
    for endpoint in OAIPMHEndpoint.objects.all():
        web_services_set = endpoint.web_services_set
        web_services_type = endpoint.web_services_type
        if web_services_set == "":
            continue
        if web_services_type == "":
            web_services_type = "VLOSet"
            endpoint.web_services_type = web_services_type
            endpoint.save()
        with open("./test.txt", "w+") as a:
            a.write(web_services_set + '\t' + web_services_type)
        oaipmh_set = OAIPMHEndpointSet.objects.get(set_spec=web_services_set, set_type=web_services_type)

        endpoint.oai_pmh_sets.add(oaipmh_set)
        endpoint.save()


def revert_oaipmh_endpoint_manytomany_oaipmh_set(apps, schema_editor):
    OAIPMHEndpoint = apps.get_model("centre_registry", "OAIPMHEndpoint")
    for endpoint in OAIPMHEndpoint.objects.all():
        endpoint.oai_pmh_sets.clear()


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('centre_registry', '0029_create_oaipmh_sets'),
    ]

    operations = [
        migrations.RunPython(oaipmh_endpoint_manytomany_oaipmh_set, reverse_code=revert_oaipmh_endpoint_manytomany_oaipmh_set)
    ]
