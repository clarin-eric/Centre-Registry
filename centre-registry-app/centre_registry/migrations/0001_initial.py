# Generated by Django 2.2.8 on 2019-12-09 14:36

import centre_registry.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentDates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuedate', models.DateField(verbose_name='Assessment issued date (YYYY-MM-DD)')),
                ('duedate', models.DateField(verbose_name='Assessment due date (YYYY-MM-DD)')),
            ],
            options={
                'verbose_name': 'issue/due dates for a centre administrative_contacttype',
                'verbose_name_plural': 'issue/due dates for a centre type',
                'ordering': ('issuedate', 'duedate'),
            },
        ),
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('shorthand', models.CharField(max_length=30, unique=True, verbose_name='Shorthand code')),
                ('organisation_name', models.CharField(max_length=100, verbose_name='OrganisationSet')),
                ('institution', models.CharField(max_length=200, verbose_name='Institution')),
                ('working_unit', models.CharField(max_length=200, verbose_name='Working unit')),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal code')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('latitude', models.CharField(max_length=20, validators=[centre_registry.models.validate_latitude], verbose_name='Latitude (from e.g. Google Maps)')),
                ('longitude', models.CharField(max_length=20, validators=[centre_registry.models.validate_longitude], verbose_name='Longitude (from e.g. Google Maps)')),
                ('type_status', models.CharField(blank=True, max_length=100, verbose_name="Comments about centre's type")),
                ('website_url', models.URLField(max_length=2000, verbose_name='Website URL')),
                ('description', models.CharField(blank=True, max_length=500, verbose_name='Description')),
                ('expertise', models.CharField(blank=True, max_length=200, verbose_name='Expertise')),
                ('type_certificate_url', models.URLField(blank=True, max_length=2000, verbose_name='Centre type certificate URL')),
                ('dsa_url', models.URLField(blank=True, max_length=2000, verbose_name='Data Seal of Approval URL')),
                ('pid_status', models.CharField(blank=True, max_length=200, verbose_name='Persistent Identifier usage status')),
                ('long_term_archiving_policy', models.CharField(blank=True, max_length=200, verbose_name='Long Time Archiving Policy')),
                ('repository_system', models.CharField(blank=True, max_length=200, verbose_name='Repository system')),
                ('strict_versioning', models.BooleanField(default=False, verbose_name='Strict versioning?')),
            ],
            options={
                'verbose_name': 'centre',
                'verbose_name_plural': 'centres',
                'ordering': ('shorthand',),
            },
        ),
        migrations.CreateModel(
            name='CentreType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=1, unique=True, verbose_name='Certified centre type')),
            ],
            options={
                'verbose_name': 'centre type',
                'verbose_name_plural': 'centre types',
                'ordering': ('type',),
            },
        ),
        migrations.CreateModel(
            name='Consortium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(max_length=3, unique=True, verbose_name='Country code')),
                ('country_name', models.CharField(max_length=20, unique=True, verbose_name='Country name')),
                ('is_observer', models.BooleanField(default=False, verbose_name='Is observer (not member)?')),
                ('name', models.CharField(blank=True, max_length=40, verbose_name='Name')),
                ('website_url', models.URLField(blank=True, max_length=2000, verbose_name='Website URL')),
                ('alias', models.CharField(blank=True, max_length=25, verbose_name='DNS subdomain alias * (*.clarin.eu)')),
            ],
            options={
                'verbose_name': 'consortium',
                'verbose_name_plural': 'consortia',
                'ordering': ('country_code', 'country_name', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254, verbose_name='E-mail address')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('edupersonprincipalname', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='eduPersonPrincipalName')),
                ('telephone_number', models.CharField(blank=True, max_length=40, verbose_name='Telephone number (E.123 international notation)')),
                ('website_url', models.URLField(blank=True, max_length=2000, verbose_name='Website URL')),
            ],
            options={
                'verbose_name': 'contact',
                'verbose_name_plural': 'contacts',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MetadataFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Metadata format name')),
            ],
            options={
                'verbose_name': 'metadata format',
                'verbose_name_plural': 'metadata formats',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SAMLIdentityFederation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shorthand', models.CharField(max_length=30, unique=True, verbose_name='Shorthand code')),
                ('information_url', models.URLField(max_length=1024, verbose_name='Information URL')),
                ('saml_metadata_url', models.URLField(max_length=1024, verbose_name='SAML metadata URL')),
                ('signing_key', models.TextField(blank=True, verbose_name='XML digital signature X.509v3 public key (PEM format, without "-----BEGIN CERTIFICATE-----" begin and and end marker)')),
            ],
            options={
                'verbose_name': 'SAML identity federation',
                'verbose_name_plural': 'SAML identity federations',
                'ordering': ('shorthand',),
            },
        ),
        migrations.CreateModel(
            name='URLReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300, verbose_name='Content description')),
                ('url', models.URLField(max_length=2000, unique=True, verbose_name='URL')),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='centre_registry.Centre')),
            ],
            options={
                'verbose_name': 'URL reference',
                'verbose_name_plural': 'URL references',
                'ordering': ('url',),
            },
        ),
        migrations.CreateModel(
            name='SAMLServiceProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_id', models.CharField(max_length=1024, unique=True, verbose_name='Entity ID')),
                ('status_url', models.URLField(blank=True, max_length=1024, verbose_name='Status URL')),
                ('production_status', models.BooleanField(default=True, verbose_name='Has production status?')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='centre_registry.Centre')),
            ],
            options={
                'verbose_name': 'SAML Service Provider',
                'verbose_name_plural': 'SAML Service Providers',
                'ordering': ('entity_id',),
            },
        ),
        migrations.CreateModel(
            name='OAIPMHEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_services_set', models.CharField(blank=True, max_length=100, verbose_name='Web services set (historic artifact)')),
                ('web_services_type', models.CharField(choices=[('REST', 'REST'), ('SOAP', 'SOAP'), ('WebLicht', 'WebLicht')], default='REST', max_length=8, verbose_name='Web services type (historic artifact)')),
                ('uri', models.URLField(max_length=2000, unique=True, verbose_name='Base URI')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='centre_registry.Centre')),
                ('metadata_format', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='centre_registry.MetadataFormat', verbose_name='Metadata format (historic artifact)')),
            ],
            options={
                'verbose_name': 'OAI-PMH endpoint',
                'verbose_name_plural': 'OAI-PMH endpoints',
                'ordering': ('uri',),
            },
        ),
        migrations.CreateModel(
            name='FCSEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(max_length=2000, unique=True, verbose_name='Base URI')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Additional note')),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='centre_registry.Centre')),
            ],
            options={
                'verbose_name': 'FCS endpoint',
                'verbose_name_plural': 'FCS endpoints',
                'ordering': ('uri',),
            },
        ),
        migrations.AddField(
            model_name='centre',
            name='administrative_contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='administrative_contact', to='centre_registry.Contact'),
        ),
        migrations.AddField(
            model_name='centre',
            name='assessmentdates',
            field=models.ManyToManyField(blank=True, related_name='assessmentdates', to='centre_registry.AssessmentDates'),
        ),
        migrations.AddField(
            model_name='centre',
            name='consortium',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='centre_registry.Consortium'),
        ),
        migrations.AddField(
            model_name='centre',
            name='monitoring_contacts',
            field=models.ManyToManyField(blank=True, related_name='monitoring_contacts', to='centre_registry.Contact'),
        ),
        migrations.AddField(
            model_name='centre',
            name='technical_contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='technical_contact', to='centre_registry.Contact'),
        ),
        migrations.AddField(
            model_name='centre',
            name='type',
            field=models.ManyToManyField(to='centre_registry.CentreType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='assessmentdates',
            name='type',
            field=models.ManyToManyField(to='centre_registry.CentreType', verbose_name='Type'),
        ),
    ]
